/*
 * Copyright 2019 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import PropTypes from "prop-types";
import React, { Component } from "react";
import * as Proto from "../../../android_emulation_control/emulator_controller_pb.js";

/**
 * A view on the emulator that is generated by streaming a series of screenshots.
 *
 * Note: This is very expensive when running remote
 *
 * TODO(jansene): Remove width & height and handle resize properly.
 */
export default class EmulatorPngView extends Component {
  static propTypes = {
    emulator: PropTypes.object, // emulator service  width: PropTypes.number,
    width: PropTypes.number,
    height: PropTypes.number
  };

  state = {
    png: ""
  };

  componentDidMount() {
    this.startStream();
  }

  componentWillUnmount() {
    if (this.screen) {
      this.screen.cancel();
    }
  }

  startStream() {
    const { width, height, emulator } = this.props;
    var request = new Proto.ImageFormat();
    request.setWidth(width);
    request.setHeight(height);

    var self = this;
    this.screen = emulator.streamScreenshot(request);
    this.screen.on("data", response => {
      // Update the image with the one we just received.
      self.setState({
        png: "data:image/jpeg;base64," + response.getImage_asB64()
      });
    });
  }

  render() {
    const { width, height } = this.props;
    return <img src={this.state.png} width={width} height={height} />;
  }
}
