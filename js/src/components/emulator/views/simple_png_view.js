/*
 * Copyright 2019 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import PropTypes from "prop-types";
import React, { Component } from "react";
import * as Proto from "../../../android_emulation_control/emulator_controller_pb.js";

/**
 * A view on the emulator that is generated by requesting a screenshot at a given interval. Beware that
 * these screenshots can arrive out of order, so the ui experience could be a little odd at times.
 *
 * Note: This is very expensive, and is merely here to showcase how you could make an interactive UI
 * using gRPC.
 *
 */
export default class EmulatorPngView extends Component {
  static propTypes = {
    emulator: PropTypes.object, // emulator service  width: PropTypes.number,
    height: PropTypes.number,
    refreshRate: PropTypes.number
  };

  static defaultProps = {
    width: 1080,
    height: 1920,
    refreshRate: 1
  };

  state = {
    png: "",
    mouseDown: false, // Current state of mouse
    xpos: 0,
    ypos: 0
  };


  componentDidMount() {
    const { refreshRate } = this.props;
    this.startStream();
  }

  componentWillUnmount() {
    if (this.screen) {
      this.screen.cancel();
    }

  }

  /* Makes a grpc call to get a screenshot */
  startStream() {
    /* eslint-disable */
    const { width, height, emulator } = this.props;

    var request = new Proto.ImageFormat();
    request.setWidth(width);
    request.setHeigth(height);

    var self = this;
    this.screen = emulator.streamScreenshot(request);
    this.screen.on("data", response => {
      // Update the image with the one we just received.
      self.setState({
        png: "data:image/jpeg;base64," + response.getImage_asB64()
      });
    });
  }

  setCoordinates = (down, xp, yp) => {
    // It is totally possible that we send clicks that are offscreen..
    const { width, height, emulator } = this.props;
    // TODO(jansene): This should come from the emulator.
    let scale = 1920 / height;
    const x = Math.round((xp * width) / (width * scale));
    const y = Math.round((yp * height) / (height * scale));

    // Make the grpc call.
    var request = new Proto.MouseEvent();
    request.setX(x);
    request.setY(y);
    request.setButtons(down ? 1 : 0);
    emulator.sendMouse(request);
  };

  handleKey = e => {
    const { emulator } = this.props;
    var request = new Proto.KeyboardEvent();
    request.setKey(e.key);
    request.setEventtype(2);
    emulator.sendKey(request);
  };

  // Properly handle the mouse events.
  handleMouseDown = e => {
    this.setState({ mouseDown: true });
    const { offsetX, offsetY } = e.nativeEvent;
    this.setCoordinates(true, offsetX, offsetY);
  };

  handleMouseUp = e => {
    this.setState({ mouseDown: false });
    const { offsetX, offsetY } = e.nativeEvent;
    this.setCoordinates(false, offsetX, offsetY);
  };

  handleMouseMove = e => {
    const { mouseDown } = this.state;
    if (!mouseDown) return;
    const { offsetX, offsetY } = e.nativeEvent;
    this.setCoordinates(true, offsetX, offsetY);
  };

  handleDrag = e => {
    e.preventDefault();
  };

  render() {
    const { width, height } = this.props;
    return (
      <div
        /* handle interaction */
        onKeyDown={this.handleKey}
        tabIndex="0"
        >
        <img
          style={{ "pointerEvents": "all" }}
          src={this.state.png}
          width={width}
          height={height}
          onDragStart={this.handleDrag}
          /* handle interaction */
          onMouseDown={this.handleMouseDown}
          onMouseMove={this.handleMouseMove}
          onMouseUp={this.handleMouseUp}
          onMouseOut={this.handleMouseUp}
          onKeyDown={this.handleKey}
        />
      </div>
    );
  }
}
